[workspace]
members = ["crates/*", "rust-skills/*", "resource_eval/sample_rs"]
resolver = "3"

[workspace.package]
edition = "2024"

[workspace.lints.rust]
future-incompatible = "warn"
keyword-idents = "warn"
let-underscore = "warn"
nonstandard-style = "warn"
refining-impl-trait = "warn"
rust-2018-idioms = "warn"
rust-2024-compatibility = { level = "warn", priority = -1 }
unused = { level = "warn", priority = -1 }
# Lint is noisy and we are unlikely to have drop order dependencies
if-let-rescope = "allow"
# Lint is noisy and we are unlikely to have drop order dependencies
tail-expr-drop-order = "allow"

[workspace.lints.clippy]
dbg-macro = "warn"
# While the pass by value may be needless know, one might decide to pass ownership with later
# optimizations in mind. Long story short: Function signatures are interfacs, which may be harder
# to change later, and we might anticpate actually using the ownership in the implementation later,
# even if we do not do so know. IMHO this lint was created without keeping in mind that code needs
# to change. This leads to false positives.
needless-pass-by-value = "allow"
# This is a) not a library and
# b) this leads to false positives if you use unwrap for unreachable errors
missing_panics_doc = "allow"
pedantic = { level = "warn", priority = -1 }
module-name-repetitions = "allow"

[package]
name = "pharia-kernel"
version = "0.13.24"
edition.workspace = true
exclude = ["helm-charts", "resource_eval"]

[dependencies]
engine-room = { path = "./crates/engine-room", registry = "jfrog", version = "0.2.9" }
aleph-alpha-client = "0.29.0"
anyhow = "1.0.99"
async-trait = "0.1.89"
axum = { version = "0.8.4", features = ["macros"] }
axum-extra = { version = "0.10.1", features = ["typed-header"] }
dotenvy = "0.15.7"
futures = "0.3.31"
oci-client = "0.15.0"
oci-wasm = "0.3.0"
# We use `rust-tls-native-roots` instead of `rustls-tls`. `rustls-tls` is just a shorthand for
# `rustls-tls-webkpi-roots`. `rustls-tls-webkpi-roots` is the default, because it is the best fit
# for Saas applications, which can be frequently deployed by the dev team. Since the Kernel is
# operated independently on premise it is not a fit for us, and the operation team on the customer
# side need a way to inject their own Certificates roots.
reqwest = { version = "0.12.23", features = [
    "brotli",
    "deflate",
    "gzip",
    "json",
    "rustls-tls-native-roots",
    "zstd",
] }
semver = "1.0.26"
serde = { version = "1.0.219", features = ["derive"] }
serde_json = "1.0.143"
toml = "0.9.5"
strum = { version = "0.27.2", features = ["derive"] }
tokio = { version = "1.47.1", features = [
    "macros",
    "rt-multi-thread",
    "signal",
] }
tower = { version = "0.5.2", features = ["util"] }
tower-http = { version = "0.6.4", features = [
    "compression-full",
    "cors",
    "decompression-full",
    "fs",
    "sensitive-headers",
    "trace",
] }
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20", features = ["env-filter", "time"] }
utoipa = { version = "5.3.1", features = ["axum_extras"] }
utoipa-scalar = { version = "0.3.0" }
wasmtime = "36.0.2"
wit-parser = "0.237.0"
url = "2.5.6"
thiserror = "2.0.16"
tokenizers = { version = "0.21.4", default-features = false, features = [
    "onig",
    "esaxx_fast",
] }
text-splitter = { version = "0.27.0", features = ["tokenizers"] }
lingua = { version = "1.7.1" }
opentelemetry = "0.30.0"
opentelemetry_sdk = { version = "0.30.0", features = ["rt-tokio"] }
tracing-opentelemetry = "0.31.0"
opentelemetry-otlp = { version = "0.30.0", features = [
    "grpc-tonic",
    "gzip-tonic",
    "tls-webpki-roots",
    "zstd-tonic",
] }
opentelemetry-semantic-conventions = { version = "0.30.0", features = [
    "semconv_experimental",
] }
metrics = "0.24.2"
metrics-exporter-prometheus = { version = "0.17.2", default-features = false, features = [
    "http-listener",
] }
itertools = "0.14.0"
urlencoding = "2.1.3"
config = "0.15.14"
heck = "0.5.0"
derive_more = { version = "2.0.1", features = [
    "constructor",
    "deref",
    "deref_mut",
    "display",
    "from",
    "into",
    "into_iterator",
] }
retry-policies = "0.5.0"
reqwest-middleware = { version = "0.4.2", features = [
    "charset",
    "http2",
    "json",
    "rustls-tls",
] }
reqwest-retry = "0.7.0"
jsonschema = "0.32.1"
rayon = "1.11.0"
serde-bool = "0.1.3"
async-stream = "0.3.6"
jiff = { version = "0.2.15", features = ["serde"] }
moka = { version = "0.12.10", features = ["sync"] }
bytesize = { version = "2.0.1", features = ["serde"] }
# We use this middleware to extract tracing information in our shell and start spans for each incoming request.
# The `tracing_level_info` feature determines the level at which spans are created by the middleware.
# If this feature is emitted, the default span level is `trace`, which will not be picked up, as the minimum
# log level for external crates is `info`.
axum-tracing-opentelemetry = { version = "0.29.0", features = [
    "tracing_level_info",
] }
bytes = "1.10.1"
tracing-core = "0.1.34"
eventsource-stream = "0.2.3"
async-openai = { version = "0.29.1", features = ["native-tls"] }
http = "1.3.1"
secrecy = "0.10.3"
backoff = "0.4.0"

[dev-dependencies]
test-skills = { path = "./crates/test-skills" }
fake = { version = "4.4.0", features = ["derive"] }
http-body-util = "0.1.3"
mime = "0.3.17"
tempfile = "3.21.0"
# Pinned because of opentelemetry crates
tokio = { version = "1.47.1", features = ["test-util"] }
tokio-test = "0.4.4"
wat = "1.237.0"
metrics-util = "0.20.0"
reqwest = { version = "0.12.23", features = ["stream"] }
opentelemetry-stdout = "0.30.0"
double-trait = "0.2.5"

[target.'cfg(not(target_env = "msvc"))'.dependencies]
tikv-jemallocator = "0.6"

[features]
test_inference = []
test_document_index = []
test_no_openai = []
default = ["test_inference", "test_document_index"]

[lints]
workspace = true

[profile.release]
# panic should only be caused by bugs
panic = 'abort'
# link time optimizations
lto = true

[profile.dev.package.cranelift-codegen]
opt-level = 3
