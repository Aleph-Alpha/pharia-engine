name: CI

on:
  push:
    branches:
      - main
    tags:
      - "pharia-kernel-v*"
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_TEST_DEBUG: 0

jobs:
  # We once encountered a a failing build on macOS after merging changes from dependabot:
  # While we technically did not have a bug, our dev setup is mostly MacOS and we need to ensure
  # we can always build the project on MacOS.
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip2
      - uses: Swatinem/rust-cache@v2
      - run: cargo build

  tests:
    runs-on: cpu-runner-16c-64gb-01
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip2
      - uses: taiki-e/install-action@v2
        with:
          tool: wasm-tools,cargo-nextest
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      # UV is required by `cargo` test in order to manage virtual environmentns for building the
      # Python skills used for integration testing.
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - run: cargo nextest run --workspace --all-features
      - run: cargo test --doc
    env:
      NAMESPACES__PHARIA_KERNEL_TEAM__REGISTRY: ghcr.io
      NAMESPACES__PHARIA_KERNEL_TEAM__BASE_REPOSITORY: aleph-alpha/pharia-kernel
      NAMESPACES__PHARIA_KERNEL_TEAM__REGISTRY_USER: ${{ github.actor }}
      NAMESPACES__PHARIA_KERNEL_TEAM__REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      PHARIA_AI_TOKEN: ${{ secrets.PHARIA_AI_TOKEN }}
      INFERENCE_URL: https://inference-api.product.pharia.com
      AUTHORIZATION_URL: https://pharia-iam.product.pharia.com

  lints:
    runs-on: cpu-runner-16c-64gb-01
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt -- --check
      - run: cargo clippy --workspace --all-features --all-targets -- -D warnings
      - run: |
          cargo install cargo-shear
          cargo shear

  test-and-deploy-if-main-or-tag:
    runs-on: cpu-runner-16c-64gb-01
    needs: [tests, lints]
    concurrency: test-and-deploy-if-main-or-tag-${{ github.ref }}
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      ARTIFACTORY_URL: https://alephalpha.jfrog.io
      ARTIFACTORY_HOST: alephalpha.jfrog.io
      ARTIFACTORY_REPOSITORY: alephalpha.jfrog.io/pharia-kernel-images
      ARTIFACTORY_HELM_REPOSITORY: pharia-kernel-helm
    steps:
      - uses: actions/checkout@v4
      - name: Generate image ID
        id: generate-image-id
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            echo "IMAGE_ID=$(echo ${{ github.ref_name }} | cut -dv -f2)" >> $GITHUB_ENV
          else
            echo "IMAGE_ID=$(date +%F)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Log in to GitLab to access shared images
        uses: redhat-actions/podman-login@v1
        with:
          registry: registry.gitlab.aleph-alpha.de
          username: ${{ secrets.GITLAB_USER }}
          password: ${{ secrets.GITLAB_TOKEN }}

      - name: Build image
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: pharia-kernel
          tags: latest ${{ env.IMAGE_ID }}
          oci: true
          containerfiles: |
            ./Containerfile

      - name: Container test
        run: bash -x ./tests/test-container.sh pharia-kernel:$IMAGE_ID

      - name: Integration test
        run: |
          (podman run -p 8081:8081 -v ./config.toml:/app/config.toml \
            -e NAMESPACES__PHARIA_KERNEL_TEAM__REGISTRY_USER=dummy \
            -e NAMESPACES__PHARIA_KERNEL_TEAM__REGISTRY_PASSWORD=dummy \
            -e NAMESPACES__PHARIA_KERNEL_TEAM__CONFIG_ACCESS_TOKEN=dummy \
            -e PHARIA_AI_TOKEN=dummy \
            pharia-kernel:$IMAGE_ID | cat) &
          bash -x ./tests/test-image.sh 8081 127.0.0.1

      - name: Export image to tarball
        run: podman save localhost/pharia-kernel:latest -o /tmp/pharia-kernel.tar

      - name: Extract SBOM from tarball
        uses: aquasecurity/trivy-action@0.31.0
        with:
          format: "cyclonedx"
          input: "/tmp/pharia-kernel.tar"
          output: "sbom.json"
          scan-type: "fs"

      - name: Vulnerability scanning with Trivy
        uses: aquasecurity/trivy-action@0.31.0
        with:
          input: /tmp/pharia-kernel.tar
          trivyignores: ".trivyignore"
          severity: "MEDIUM,HIGH,CRITICAL"
          exit-code: "1"
          output: "report.json"

      - name: Create kind cluster with registry
        id: kind
        uses: helm/kind-action@v1
        with:
          registry: true
          registry_name: local-registry
          registry_port: 5001

      - name: Push to local registry
        id: push-local
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ env.IMAGE_ID }}
          registry: ${{ steps.kind.outputs.LOCAL_REGISTRY }}
          tls-verify: false

      - name: Test Helm chart
        env:
          LOCAL_REGISTRY: ${{ steps.kind.outputs.LOCAL_REGISTRY }}
        run: |
          helm install pharia-kernel helm-charts/pharia-kernel \
              -f helm-charts/pharia-kernel/values-kind.yaml \
              --set "image.repository=$LOCAL_REGISTRY/pharia-kernel" \
              --set "image.tag=$IMAGE_ID" \
              --set "namespaces.playground.configAccessToken=${{ secrets.PLAYGROUND_GITLAB_TOKEN }}" \
              --set "namespaces.playground.registryUser=${{ secrets.PLAYGROUND_GITLAB_USER }}" \
              --set "namespaces.playground.registryPassword=${{ secrets.PLAYGROUND_GITLAB_TOKEN }}" \
              --wait --timeout 10m
          helm test pharia-kernel

          kubectl port-forward service/pharia-kernel 8082:80 &

          while ! nc -vz localhost 8082 > /dev/null 2>&1 ; do
            echo "Waiting for port-forward to be ready..."
            sleep 0.1
          done

          ./tests/test-list-skills.sh "${{ secrets.PHARIA_AI_TOKEN }}" http://127.0.0.1:8082
          ./tests/test-run-skill.sh "${{ secrets.PHARIA_AI_TOKEN }}" http://127.0.0.1:8082

          helm uninstall pharia-kernel

      - name: Test Helm chart Beta
        env:
          LOCAL_REGISTRY: ${{ steps.kind.outputs.LOCAL_REGISTRY }}
        run: |
          helm install pharia-kernel helm-charts/pharia-kernel \
              -f helm-charts/pharia-kernel/values-kind.yaml \
              --set "image.repository=$LOCAL_REGISTRY/pharia-kernel" \
              --set "image.tag=$IMAGE_ID" \
              --set "namespaces.playground.configAccessToken=${{ secrets.PLAYGROUND_GITLAB_TOKEN }}" \
              --set "namespaces.playground.registryUser=${{ secrets.PLAYGROUND_GITLAB_USER }}" \
              --set "namespaces.playground.registryPassword=${{ secrets.PLAYGROUND_GITLAB_TOKEN }}" \
              --set "global.phariaAiFeatureSet=BETA" \
              --wait --timeout 10m
          helm test pharia-kernel

          kubectl port-forward service/pharia-kernel 8083:80 &

          while ! nc -vz localhost 8083 > /dev/null 2>&1 ; do
            echo "Waiting for port-forward to be ready..."
            sleep 0.1
          done

          ./tests/test-list-skills.sh "${{ secrets.PHARIA_AI_TOKEN }}" http://127.0.0.1:8083
          ./tests/test-run-skill.sh "${{ secrets.PHARIA_AI_TOKEN }}" http://127.0.0.1:8083

          helm uninstall pharia-kernel

      - if: github.event_name != 'pull_request'
        name: Get JFrog Artifactory login credentials
        uses: ./.github/actions/jfrog

      - if: github.event_name != 'pull_request'
        name: Log in to JFrog Artifactory
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.ARTIFACTORY_REPOSITORY }}
          username: ${{ env.JFROG_ACCESS_TOKEN_SUBJECT }}
          password: ${{ env.JFROG_ACCESS_TOKEN }}

      - if: github.event_name != 'pull_request'
        name: Push to JFrog Artifactory
        id: push
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.ARTIFACTORY_REPOSITORY }}

      - if: github.event_name != 'pull_request'
        uses: oras-project/setup-oras@v1

      - if: github.event_name != 'pull_request'
        name: Attach Trivy report to Image
        run: |
          oras login ${{ env.ARTIFACTORY_HOST }} -u ${{ env.JFROG_ACCESS_TOKEN_SUBJECT }} -p ${{ env.JFROG_ACCESS_TOKEN }}
          oras attach --artifact-type "application/aa.trivy.report" --annotation "created-by=Github-CI" --annotation "content=report.json" ${{ env.ARTIFACTORY_REPOSITORY }}/pharia-kernel:$IMAGE_ID report.json
          oras attach --artifact-type "application/aa.trivy.sbom"   --annotation "created-by=Github-CI" --annotation "content=sbom.json" ${{ env.ARTIFACTORY_REPOSITORY }}/pharia-kernel:$IMAGE_ID sbom.json
          oras attach --artifact-type "application/aa.trivy.triage" --annotation "created-by=Github-CI" --annotation "content=triage.toml" ${{ env.ARTIFACTORY_REPOSITORY }}/pharia-kernel:$IMAGE_ID triage.toml

      - if: github.event_name != 'pull_request'
        name: Print image URL
        run: echo "Image pushed to ${{ steps.push.outputs.registry-paths }}"

      - if: github.event_name != 'pull_request'
        name: Log in to GitHub
        uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - if: github.event_name != 'pull_request'
        name: Push to GitHub
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: latest
          registry: ghcr.io/aleph-alpha/pharia-kernel

      - if: github.event_name != 'pull_request'
        name: Get user name and email
        run: |
          echo "TRIGGER_USER_NAME=$(git log -n 1 --pretty=format:%aN)" >> $GITHUB_ENV
          echo "TRIGGER_USER_EMAIL=$(git log -n 1 --pretty=format:%aE)" >> $GITHUB_ENV

      - if: github.event_name != 'pull_request'
        name: Update image tag
        uses: digital-blueprint/gitlab-pipeline-trigger-action@v1
        with:
          host: "gitlab.aleph-alpha.de"
          trigger_token: ${{ secrets.DEPLOY_TRIGGER_TOKEN }}
          access_token: ${{ secrets.DEPLOY_ACCESS_TOKEN }}
          id: "931"
          ref: "main"
          variables: '{"TRIGGER_USER_EMAIL":"${{ env.TRIGGER_USER_EMAIL }}","TRIGGER_USER_NAME":"${{ env.TRIGGER_USER_NAME }}","TRIGGER_IMAGE_TAG":"${{ env.IMAGE_ID }}","TRIGGER_IMAGE_TAG_TARGET":".image.tag","UPDATE_DIRECTORY":"applications","UPDATE_PROJECT":"pharia-kernel"}'

      - if: github.ref_type == 'tag'
        name: Extract Helm chart version
        run: echo "CHART_VERSION=$(yq .version < helm-charts/pharia-kernel/Chart.yaml)" >> $GITHUB_ENV

      - if: github.ref_type == 'tag'
        name: Publish Helm chart changelog
        run: |
          CHANGELOG_FILE=Changelog-pharia-kernel-$CHART_VERSION.md
          curl --location --header "PRIVATE-TOKEN: ${{ secrets.PACKAGE_REGISTRY_ACCESS_TOKEN }}" \
            --upload-file helm-charts/pharia-kernel/changelogs/$CHANGELOG_FILE \
            "https://gitlab.aleph-alpha.de/api/v4/projects/1139/packages/generic/changelogs/pharia-ai/$CHANGELOG_FILE"

      - if: github.ref_type == 'tag'
        name: Push Helm charts
        uses: appany/helm-oci-chart-releaser@v0.4.2
        with:
          name: pharia-kernel
          repository: ${{ env.ARTIFACTORY_HELM_REPOSITORY }}
          tag: ${{ env.CHART_VERSION }}
          path: helm-charts/pharia-kernel
          registry: ${{ env.ARTIFACTORY_HOST }}
          registry_username: ${{ env.JFROG_ACCESS_TOKEN_SUBJECT }}
          registry_password: ${{ env.JFROG_ACCESS_TOKEN }}
