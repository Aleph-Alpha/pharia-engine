name: CI

on:
  push:
    branches:
      - main
    tags:
      - "pharia-kernel-v*"
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CARGO_PROFILE_TEST_DEBUG: 0

jobs:
  # We once encountered a a failing build on macOS after merging changes from dependabot:
  # While we technically did not have a bug, our dev setup is mostly MacOS and we need to ensure
  # we can always build the project on MacOS.
  build-macos:
    runs-on: macos-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip2
      - uses: Swatinem/rust-cache@v2
      - run: cargo build

  tests:
    # Cargo nextest runs test as individual processes and benefits from the number of cores.
    runs-on: cpu-runner-16c-64gb-01
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-wasip2
      - uses: taiki-e/install-action@v2
        with:
          tool: wasm-tools,cargo-nextest@0.9.98
      - uses: Swatinem/rust-cache@v2
      - uses: actions/setup-python@v6
        with:
          python-version: "3.12"
      # UV is required by `cargo` test in order to manage virtual environments for building the
      # Python skills used for integration testing.
      - name: Install uv
        uses: astral-sh/setup-uv@v6
      - run: cargo nextest run --workspace --all-features
      - run: cargo test --doc
    env:
      TEST_REGISTRY: ghcr.io
      TEST_BASE_REPOSITORY: aleph-alpha/pharia-kernel
      TEST_REGISTRY_USER: ${{ github.actor }}
      TEST_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      PHARIA_AI_TOKEN: ${{ secrets.PHARIA_AI_TOKEN }}
      INFERENCE_URL: https://inference-api.product.pharia.com
      DOCUMENT_INDEX_URL: https://document-index.product.pharia.com
      AUTHORIZATION_URL: https://pharia-iam.product.pharia.com
      OPENAI_INFERENCE__URL: https://api.openai.com/v1
      OPENAI_INFERENCE__TOKEN: ${{ secrets.OPENAI_API_KEY }}

  lints:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt -- --check
      - run: cargo clippy --workspace --all-features --all-targets -- -D warnings
      - run: |
          cargo install cargo-shear
          cargo shear

  build-image:
    # We were seeing image build times of 14:46 minutes on ubuntu-latest.
    # 8c-32gb brought this down to 7:20 minutes while being billed at $0.032/minute (~$0.23/build)
    # 16c-64gb comes in at 6:18 minutes while being billed at $0.064/minute (~$0.40/build)
    runs-on: cpu-runner-16c-64gb-01
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v5
      - name: Generate image ID
        id: generate-image-id
        run: |
          if [ "${GITHUB_REF_TYPE}" = "tag" ]; then
            echo "IMAGE_ID=$(echo ${{ github.ref_name }} | cut -dv -f2)" >> $GITHUB_ENV
          else
            echo "IMAGE_ID=$(date +%F)-$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Log in to GitLab to access shared images
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603
        with:
          registry: registry.gitlab.aleph-alpha.de
          username: ${{ secrets.GITLAB_USER }}
          password: ${{ secrets.GITLAB_TOKEN }}

      - name: Build image
        id: build-image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056
        with:
          image: pharia-kernel
          tags: latest ${{ env.IMAGE_ID }}
          oci: true
          containerfiles: |
            ./Containerfile

      - name: Export image to tarball
        run: podman save localhost/pharia-kernel:${{ env.IMAGE_ID }} -o /tmp/pharia-kernel.tar

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: pharia-kernel-image
          path: /tmp/pharia-kernel.tar
          retention-days: 1

      - name: Log in to GitHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c
        with:
          image: pharia-kernel
          tags: ${{ env.IMAGE_ID }}
          registry: ghcr.io/aleph-alpha/pharia-kernel
    outputs:
      image_id: ${{ env.IMAGE_ID }}

  security-scan:
    # We are not time bound by this job, so ubuntu-latest is fine.
    runs-on: ubuntu-latest
    needs: [build-image]
    permissions:
      contents: read
      packages: read
    env:
      IMAGE_ID: ${{ needs.build-image.outputs.image_id }}
    steps:
      - uses: actions/checkout@v5

      - name: Log in to GitHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy Scan
        id: trivy-scan
        uses: Aleph-Alpha/actions/trivy/scan@c07a5bda5c99d704e1b8e6d75380edcd76f855f2
        with:
          toml-file: triage.toml
          image-uri: ghcr.io/aleph-alpha/pharia-kernel/pharia-kernel:${{ env.IMAGE_ID }}

      - name: Run CycloneDX Cargo
        uses: Aleph-Alpha/actions/cyclonedx/cargo@c07a5bda5c99d704e1b8e6d75380edcd76f855f2
        with:
          sbom-file: ${{ steps.trivy-scan.outputs.license }}

      - name: Upload scanning artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-scanning-results
          path: |
            ${{ steps.trivy-scan.outputs.report }}
            ${{ steps.trivy-scan.outputs.license }}
            ${{ steps.trivy-scan.outputs.sbom }}
          retention-days: 1
    outputs:
      report: ${{ steps.trivy-scan.outputs.report }}
      license: ${{ steps.trivy-scan.outputs.license }}
      sbom: ${{ steps.trivy-scan.outputs.sbom }}

  test-image:
    # We are not time bound by this job, so ubuntu-latest is fine.
    runs-on: ubuntu-latest
    needs: [build-image]
    permissions:
      contents: read
    env:
      IMAGE_ID: ${{ needs.build-image.outputs.image_id }}
    steps:
      - uses: actions/checkout@v5

      - name: Download image artifact
        uses: actions/download-artifact@v5
        with:
          name: pharia-kernel-image
          path: /tmp

      - name: Load image from tarball
        run: podman load -i /tmp/pharia-kernel.tar

      - name: Container test
        run: bash -x ./tests/test-container.sh pharia-kernel:$IMAGE_ID

      - name: Integration test
        run: |
          (podman run -p 8081:8081 pharia-kernel:$IMAGE_ID | cat) &
          bash -x ./tests/test-image.sh 8081 127.0.0.1

  test-helm-chart:
    runs-on: cpu-runner-8c-32gb-01
    needs: [build-image]
    permissions:
      contents: read
      id-token: write
    env:
      ARTIFACTORY_HOST: alephalpha.jfrog.io
      IMAGE_ID: ${{ needs.build-image.outputs.image_id }}
    steps:
      - uses: actions/checkout@v5

      - name: Download image artifact
        uses: actions/download-artifact@v5
        with:
          name: pharia-kernel-image
          path: /tmp

      - name: Load image from tarball
        run: podman load -i /tmp/pharia-kernel.tar

      - name: Tag image as latest
        run: podman tag pharia-kernel:${{ env.IMAGE_ID }} pharia-kernel:latest

      - name: Create kind cluster with registry
        id: kind
        uses: helm/kind-action@v1
        with:
          registry: true
          registry_name: local-registry
          registry_port: 5001

      - name: Push to local registry
        id: push-local
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c
        with:
          image: pharia-kernel
          tags: ${{ env.IMAGE_ID }}
          registry: ${{ steps.kind.outputs.LOCAL_REGISTRY }}
          tls-verify: false

      - name: Set up JFrog CLI with OIDC
        id: jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.ARTIFACTORY_URL }}
        with:
          oidc-provider-name: github
          oidc-audience: ${{ vars.ARTIFACTORY_URL }}

      - name: Test Helm chart
        env:
          LOCAL_REGISTRY: ${{ steps.kind.outputs.LOCAL_REGISTRY }}
        run: |
          echo ${{ steps.jfrog.outputs.oidc-token }} | helm registry login -u ${{ steps.jfrog.outputs.oidc-user }} --password-stdin ${{ env.ARTIFACTORY_HOST }}
          helm dependency update helm-charts/pharia-kernel

          helm install pharia-kernel helm-charts/pharia-kernel \
              -f helm-charts/pharia-kernel/values-kind.yaml \
              --set "image.registry=$LOCAL_REGISTRY" \
              --set "image.repository=pharia-kernel" \
              --set "image.tag=$IMAGE_ID" \
              --set "namespaces.playground.configAccessToken=${{ secrets.PLAYGROUND_GITLAB_TOKEN }}" \
              --set "namespaces.playground.registryUser=${{ secrets.PLAYGROUND_GITLAB_USER }}" \
              --set "namespaces.playground.registryPassword=${{ secrets.PLAYGROUND_GITLAB_TOKEN }}" \
              --set "namespaces.playground.configUrl=${{ vars.PLAYGROUND_GITLAB_CONFIG_URL }}" \
              --set "namespaces.playground.registry=${{ vars.PLAYGROUND_GITLAB_REGISTRY }}" \
              --set "namespaces.playground.baseRepository=${{ vars.PLAYGROUND_GITLAB_BASE_REPOSITORY }}" \
              --set "inferenceAddress=${{ vars.CI_INFERENCE_ADDRESS }}" \
              --set "documentIndexAddress=${{ vars.CI_DOCUMENT_INDEX_ADDRESS }}" \
              --set "authorizationAddress=${{ vars.CI_AUTHORIZATION_ADDRESS }}" \
              --wait --timeout 3m --debug

          helm test pharia-kernel

          kubectl port-forward service/pharia-kernel 8082:80 &

          while ! nc -vz localhost 8082 > /dev/null 2>&1 ; do
            echo "Waiting for port-forward to be ready..."
            sleep 0.1
          done

          ./tests/test-list-skills.sh "${{ secrets.PHARIA_AI_TOKEN }}" http://127.0.0.1:8082
          ./tests/test-run-skill.sh "${{ secrets.PHARIA_AI_TOKEN }}" http://127.0.0.1:8082

          helm uninstall pharia-kernel

  test-helm-chart-beta:
    runs-on: cpu-runner-8c-32gb-01
    needs: [build-image]
    permissions:
      contents: read
      id-token: write
    env:
      ARTIFACTORY_HOST: alephalpha.jfrog.io
      IMAGE_ID: ${{ needs.build-image.outputs.image_id }}
    steps:
      - uses: actions/checkout@v5

      - name: Download image artifact
        uses: actions/download-artifact@v5
        with:
          name: pharia-kernel-image
          path: /tmp

      - name: Load image from tarball
        run: podman load -i /tmp/pharia-kernel.tar

      - name: Tag image as latest
        run: podman tag pharia-kernel:${{ env.IMAGE_ID }} pharia-kernel:latest

      - name: Create kind cluster with registry
        id: kind
        uses: helm/kind-action@v1
        with:
          registry: true
          registry_name: local-registry
          registry_port: 5002

      - name: Push to local registry
        id: push-local
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c
        with:
          image: pharia-kernel
          tags: ${{ env.IMAGE_ID }}
          registry: ${{ steps.kind.outputs.LOCAL_REGISTRY }}
          tls-verify: false

      - name: Set up JFrog CLI with OIDC
        id: jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.ARTIFACTORY_URL }}
        with:
          oidc-provider-name: github
          oidc-audience: ${{ vars.ARTIFACTORY_URL }}

      - name: Test Helm chart Beta
        env:
          LOCAL_REGISTRY: ${{ steps.kind.outputs.LOCAL_REGISTRY }}
        run: |
          echo ${{ steps.jfrog.outputs.oidc-token }} | helm registry login -u ${{ steps.jfrog.outputs.oidc-user }} --password-stdin ${{ env.ARTIFACTORY_HOST }}
          helm dependency update helm-charts/pharia-kernel

          helm install pharia-kernel helm-charts/pharia-kernel \
              -f helm-charts/pharia-kernel/values-kind.yaml \
              --set "image.registry=$LOCAL_REGISTRY" \
              --set "image.repository=pharia-kernel" \
              --set "image.tag=$IMAGE_ID" \
              --set "namespaces.playground.configAccessToken=${{ secrets.PLAYGROUND_GITLAB_TOKEN }}" \
              --set "namespaces.playground.registryUser=${{ secrets.PLAYGROUND_GITLAB_USER }}" \
              --set "namespaces.playground.registryPassword=${{ secrets.PLAYGROUND_GITLAB_TOKEN }}" \
              --set "namespaces.playground.configUrl=${{ vars.PLAYGROUND_GITLAB_CONFIG_URL }}" \
              --set "namespaces.playground.registry=${{ vars.PLAYGROUND_GITLAB_REGISTRY }}" \
              --set "namespaces.playground.baseRepository=${{ vars.PLAYGROUND_GITLAB_BASE_REPOSITORY }}" \
              --set "inferenceAddress=${{ vars.CI_INFERENCE_ADDRESS }}" \
              --set "documentIndexAddress=${{ vars.CI_DOCUMENT_INDEX_ADDRESS }}" \
              --set "authorizationAddress=${{ vars.CI_AUTHORIZATION_ADDRESS }}" \
              --set "global.phariaAiFeatureSet=BETA" \
              --wait --timeout 3m --debug

          helm test pharia-kernel

          kubectl port-forward service/pharia-kernel 8083:80 &

          while ! nc -vz localhost 8083 > /dev/null 2>&1 ; do
            echo "Waiting for port-forward to be ready..."
            sleep 0.1
          done

          ./tests/test-list-skills.sh "${{ secrets.PHARIA_AI_TOKEN }}" http://127.0.0.1:8083
          ./tests/test-run-skill.sh "${{ secrets.PHARIA_AI_TOKEN }}" http://127.0.0.1:8083

          helm uninstall pharia-kernel

  deploy:
    if: github.event_name != 'pull_request'
    runs-on: cpu-runner-8c-32gb-01
    needs:
      [
        build-image,
        security-scan,
        test-image,
        test-helm-chart,
        test-helm-chart-beta,
        tests,
        lints,
      ]
    concurrency: deploy-${{ github.ref }}
    permissions:
      contents: read
      id-token: write
      packages: write
    env:
      ARTIFACTORY_URL: https://alephalpha.jfrog.io
      ARTIFACTORY_HOST: alephalpha.jfrog.io
      ARTIFACTORY_REPOSITORY: alephalpha.jfrog.io/pharia-kernel-images
      ARTIFACTORY_HELM_REPOSITORY: pharia-kernel-helm
      HARBOR_REPOSITORY: ${{ vars.HARBOR_REGISTRY }}/pharia-kernel-images
      IMAGE_ID: ${{ needs.build-image.outputs.image_id }}
    steps:
      - uses: actions/checkout@v5

      - name: Download image artifact
        uses: actions/download-artifact@v5
        with:
          name: pharia-kernel-image
          path: /tmp

      - name: Download scanning artifacts
        uses: actions/download-artifact@v5
        with:
          name: security-scanning-results
          path: ./

      - name: Load image from tarball
        run: podman load -i /tmp/pharia-kernel.tar

      - name: Tag image as latest
        run: podman tag pharia-kernel:${{ env.IMAGE_ID }} pharia-kernel:latest

      - name: Set up JFrog CLI with OIDC
        id: jfrog
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.ARTIFACTORY_URL }}
        with:
          oidc-provider-name: github
          oidc-audience: ${{ vars.ARTIFACTORY_URL }}

      - name: Log in to JFrog Artifactory
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603
        with:
          registry: ${{ env.ARTIFACTORY_REPOSITORY }}
          username: ${{ steps.jfrog.outputs.oidc-user }}
          password: ${{ steps.jfrog.outputs.oidc-token }}

      - name: Push to JFrog Artifactory
        id: push
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c
        with:
          image: pharia-kernel
          tags: latest ${{ env.IMAGE_ID }}
          registry: ${{ env.ARTIFACTORY_REPOSITORY }}

      - name: Attach Security Artifacts
        uses: Aleph-Alpha/actions/oras/attach@c07a5bda5c99d704e1b8e6d75380edcd76f855f2
        with:
          image-uri: ${{ env.ARTIFACTORY_REPOSITORY }}/pharia-kernel:$IMAGE_ID
          license-path: ${{ needs.security-scan.outputs.license }}
          report-path: ${{ needs.security-scan.outputs.report }}
          sbom-path: ${{ needs.security-scan.outputs.sbom }}
          toml-path: triage.toml

      - name: Print image URL
        run: echo "Image pushed to ${{ steps.push.outputs.registry-paths }}"

      - name: Log in to GitHub
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c
        with:
          image: pharia-kernel
          tags: latest
          registry: ghcr.io/aleph-alpha/pharia-kernel

      - name: Get user name and email
        run: |
          echo "TRIGGER_USER_NAME=$(git log -n 1 --pretty=format:%aN)" >> $GITHUB_ENV
          echo "TRIGGER_USER_EMAIL=$(git log -n 1 --pretty=format:%aE)" >> $GITHUB_ENV

      - name: Update image tag
        uses: digital-blueprint/gitlab-pipeline-trigger-action@v1
        with:
          host: "gitlab.aleph-alpha.de"
          trigger_token: ${{ secrets.DEPLOY_TRIGGER_TOKEN }}
          access_token: ${{ secrets.DEPLOY_ACCESS_TOKEN }}
          id: "931"
          ref: "main"
          variables: '{"TRIGGER_USER_EMAIL":"${{ env.TRIGGER_USER_EMAIL }}","TRIGGER_USER_NAME":"${{ env.TRIGGER_USER_NAME }}","TRIGGER_IMAGE_TAG":"${{ env.IMAGE_ID }}","TRIGGER_IMAGE_TAG_TARGET":".image.tag","UPDATE_DIRECTORY":"applications","UPDATE_PROJECT":"pharia-kernel"}'

      - name: Log in to Harbor
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603
        with:
          registry: ${{ env.HARBOR_REPOSITORY }}
          username: ${{ vars.HARBOR_USER }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Push to Harbor
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c
        with:
          image: pharia-kernel
          tags: latest ${{ env.IMAGE_ID }}
          registry: ${{ env.HARBOR_REPOSITORY }}

      - if: github.ref_type == 'tag'
        name: Extract Helm chart version
        run: echo "CHART_VERSION=$(yq .version < helm-charts/pharia-kernel/Chart.yaml)" >> $GITHUB_ENV

      - if: github.ref_type == 'tag'
        name: Publish Helm chart changelog
        run: |
          CHANGELOG_FILE=Changelog-pharia-kernel-$CHART_VERSION.md
          curl --location --header "PRIVATE-TOKEN: ${{ secrets.PACKAGE_REGISTRY_ACCESS_TOKEN }}" \
            --upload-file helm-charts/pharia-kernel/changelogs/$CHANGELOG_FILE \
            "https://gitlab.aleph-alpha.de/api/v4/projects/1139/packages/generic/changelogs/pharia-ai/$CHANGELOG_FILE"

      - if: github.ref_type == 'tag'
        name: Push Helm charts
        uses: appany/helm-oci-chart-releaser@v0.4.2
        with:
          name: pharia-kernel
          repository: ${{ env.ARTIFACTORY_HELM_REPOSITORY }}
          tag: ${{ env.CHART_VERSION }}
          path: helm-charts/pharia-kernel
          registry: ${{ env.ARTIFACTORY_HOST }}
          registry_username: ${{ steps.jfrog.outputs.oidc-user }}
          registry_password: ${{ steps.jfrog.outputs.oidc-token }}
          update_dependencies: "true"

  dependabot-auto-merge:
    needs: [tests, lints, security-scan, test-image, test-helm-chart, test-helm-chart-beta]
    permissions:
      pull-requests: write
      contents: write
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'}}
    steps:
      - name: Auto-approve
        run: gh pr review "$PR_URL" --approve
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Enable auto-merge
        run: gh pr merge --auto --rebase "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
