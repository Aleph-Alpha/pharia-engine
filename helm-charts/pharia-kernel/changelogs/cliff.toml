# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
# template for the changelog header
header = """
## Sub Chart Name - pharia-kernel
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
# The Helm chart version is expected in the release object's `extra` field.
# If not provided, fall back to show the application version instead.
body = """
{% if extra.chart_version -%}
    ## Sub Chart Version - {{ extra.chart_version }}
{% elif version -%}
    ## Sub Chart Application Version - {{ version | trim_start_matches(pat="v") }}
{% else -%}
    ## Sub Chart Application Version - Unreleased
{% endif -%}
{% if extra.timestamp -%}
    ## Release Date - {{ extra.timestamp }}\n
{% else -%}
    ## Release Date - {{ timestamp | date(format="%Y-%m-%d") }}\n
{% endif -%}
### Description of Changes:
{% for commit in commits %}
- [ ] {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
{% endfor %}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | split(pat="\n") | first | upper_first | trim }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
### Related Issues/Links:
- [Jira Board](https://aleph-alpha.atlassian.net/jira/software/projects/PK/boards/160)

### Notes:
- Generated by git-cliff
- The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).
"""
# remove the leading and trailing whitespace from the templates
trim = true

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^[a|A]dd", group = "Added" },
    { message = "^[s|S]upport", group = "Added" },
    { message = "^[r|R]emove", group = "Removed" },
    { message = "^.*: add", group = "Added" },
    { message = "^.*: support", group = "Added" },
    { message = "^.*: remove", group = "Removed" },
    { message = "^.*: delete", group = "Removed" },
    { message = "^test", group = "Fixed" },
    { message = "^fix", group = "Fixed" },
    { message = "^.*: fix", group = "Fixed" },
    { message = "^.*", group = "Changed" },
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
