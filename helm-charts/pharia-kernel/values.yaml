global:
  # Global config for all ingress resources
  ingress:
    # -- Domain for external access / ingress to Pharia AI services via {service}.{domain}
    #    e.g. {service}.pharia-ai.example.com
    ingressDomain: local
image:
  registry: alephalpha.jfrog.io
  repository: container-images/pharia-kernel
  tag: ""
  pullPolicy: IfNotPresent
fullnameOverride: pharia-kernel
service:
  type: ClusterIP
  ports:
    - name: http
      servicePort: 80
      containerPort: 8081
      protocol: TCP
    - name: metrics
      servicePort: 9000
      containerPort: 9000
      protocol: TCP
serviceAccount:
  automountServiceAccountToken: true
automountServiceAccountToken: true
serviceMonitor:
  enabled: false
  endpoints:
    - interval: 30s
      path: /
      port: metrics
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 2000
  runAsGroup: 2000
containerSecurityContext:
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
ingress:
  annotations:
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: 20m
# -- Specify the default namespaces for PhariaKernel, which provide the default skills.
# If the default namespaces are configured, any duplicate namespaces in `pharia-kernel.namespaces` are ignored
# because these are backed by environment variables, which have higher precedence.
# For each default namespace, the following values need to be provided in the PhariaAI ConfigMap:
# - NAMESPACES__<NAMESPACE>__CONFIG_URL: URL to the namespace configuration
# - NAMESPACES__<NAMESPACE>__REGISTRY: Skill registry of the namespace
# - NAMESPACES__<NAMESPACE>__BASE_REPOSITORY: Base repository of the namespace
# The credentials for accessing the skill registries are retrieved from `registryUser` and `registryPassword` in
# the Secret configured as `global.imagePullOpaqueSecretName`.
defaultNamespaces: []
# -- Active namespaces for PhariaKernel. e.g.:
# playground:
#   configUrl: "https://gitlab.aleph-alpha.de/api/v4/projects/997/repository/files/namespace.toml/raw?ref=main"
#   configAccessToken: "GITLAB_CONFIG_ACCESS_TOKEN"
#   registry: "registry.gitlab.aleph-alpha.de"
#   baseRepository: "engineering/pharia-kernel-playground/skills"
#   registryUser: "REGISTRY_USER"
#   registryPassword: "REGISTRY_PASSWORD"
# Each of the value can alternatively be provided as environment variables, which have higher precedence:
# NAMESPACES__PLAYGROUND__CONFIG_URL
# NAMESPACES__PLAYGROUND__CONFIG_ACCESS_TOKEN
# NAMESPACES__PLAYGROUND__REGISTRY
# NAMESPACES__PLAYGROUND__BASE_REPOSITORY
# NAMESPACES__PLAYGROUND__REGISTRY_USER
# NAMESPACES__PLAYGROUND__REGISTRY_PASSWORD
namespaces: {}
logLevel: info
openTelemetryEndpoint: ""
authorizationAddress: ""
inferenceAddress: ""
documentIndexAddress: ""

extraVolumes:
  - name: config-volume
    configMap:
      name: '{{ include "pharia-common.names.fullname" . }}-config'
extraVolumeMounts:
  - name: config-volume
    mountPath: /app/config.toml
    subPath: config.toml
    readOnly: true

# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, add the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: "1"
#   memory: 4Gi
# requests:
#   cpu: 500m
#   memory: 2Gi
resources:
  limits:
    cpu: "4"
    memory: 8Gi
  requests:
    cpu: "2"
    memory: 4Gi

env:
  customTemplate: "pharia-kernel.envvar"

livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 15
  failureThreshold: 2
readinessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 2
