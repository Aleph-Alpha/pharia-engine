include:
  - project: "engineering/vulnerability-scanner"
    file: "pipeline-templates/sbom_vulnerability_scan.v1.yml"

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - when: always

# all jobs can be interrupted, e.g. when a newer pipeline for the same branch starts
default:
  interruptible: true

stages:
  - test
  - image_build
  - image_test
  - image_publish

variables:
  ARTIFACTORY_HOST: "alephalpha.jfrog.io"
  ARTIFACTORY_URL: "https://${ARTIFACTORY_HOST}"
  ARTIFACTORY_REPO: pharia-kernel-images
  CONTAINER_PORT: 8081
  KERNEL_IMAGE: $CI_REGISTRY_IMAGE
  SKILL_ARTIFACT_NAME: pharia-skill
  SKILL_IMAGE: $CI_REGISTRY_IMAGE/$SKILL_ARTIFACT_NAME

cargo_clippy:
  stage: test
  image: rust:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - rustup component add clippy
    - cargo clippy --workspace --all-targets --all-features

cargo_test:
  stage: test
  image: rust:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    SKILL_REGISTRY_USER: $CI_REGISTRY_USER
    SKILL_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    - apt-get update
    - apt-get -y install python3-venv
    - cargo install wit-bindgen-cli
    - rustup target add wasm32-wasi
    - ./build-skill.sh
    - ./build-skill-py.sh
    - cargo test --workspace --all-features

image_build:
  stage: image_build
  image: registry.gitlab.aleph-alpha.de/enterprise-readiness/shared-images/gitlab-ci/common:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:my_section[collapsed=true]\r\e[0KBuild image"
    - >
      podman build \
        --ulimit nofile=$(ulimit -n):$(ulimit -n) \
        --layers \
        --cache-to $KERNEL_IMAGE/cache \
        --cache-from $KERNEL_IMAGE/cache \
        --cache-ttl=24h \
        -f Containerfile \
        --label "com.aleph-alpha.git-hash"=$CI_COMMIT_SHORT_SHA \
        --label "com.aleph-alpha.image-id"=$(image_id) \
        -t $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA \
        --progress=plain \
        .
    - podman push $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA
    - echo -e "\e[0Ksection_end:`date +%s`:my_section\r\e[0K"

sbom_vulnerability_scan:
  extends: .sbom_vulnerability_scan
  stage: image_build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      needs:
        - image_build
      variables:
        ARTIFACT_NAME: $CI_PROJECT_NAME
        FULL_IMAGE_NAME: $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_SECURITY_SCAN == "true"
      variables:
        ARTIFACT_NAME: $CI_PROJECT_NAME:latest
        FULL_IMAGE_NAME: $KERNEL_IMAGE:latest

skill_image_build:
  stage: image_build
  image: registry.gitlab.aleph-alpha.de/enterprise-readiness/shared-images/gitlab-ci/common:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo -e "\e[0Ksection_start:`date +%s`:my_section[collapsed=true]\r\e[0KBuild image"
    - >
      podman build \
        --ulimit nofile=$(ulimit -n):$(ulimit -n) \
        --layers \
        --cache-to $SKILL_IMAGE/cache \
        --cache-from $SKILL_IMAGE/cache \
        --cache-ttl=24h \
        -f Containerfile.skill \
        --label "com.aleph-alpha.git-hash"=$CI_COMMIT_SHORT_SHA \
        --label "com.aleph-alpha.image-id"=$(image_id) \
        -t $SKILL_IMAGE:$CI_COMMIT_SHORT_SHA \
        --progress=plain \
        .
    - podman push $SKILL_IMAGE:$CI_COMMIT_SHORT_SHA
    - echo -e "\e[0Ksection_end:`date +%s`:my_section\r\e[0K"

skill_sbom_vulnerability_scan:
  extends: .sbom_vulnerability_scan
  stage: image_build
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      needs:
        - skill_image_build
      variables:
        ARTIFACT_NAME: $SKILL_ARTIFACT_NAME
        FULL_IMAGE_NAME: $SKILL_IMAGE:$CI_COMMIT_SHORT_SHA
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_SECURITY_SCAN == "true"
      variables:
        ARTIFACT_NAME: $SKILL_ARTIFACT_NAME:latest
        FULL_IMAGE_NAME: $SKILL_IMAGE:latest

container_test:
  stage: image_test
  image: registry.gitlab.aleph-alpha.de/enterprise-readiness/shared-images/gitlab-ci/common:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  before_script:
    - podman login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - sh -x ./tests/test-container.sh $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA

integration_test:
  stage: image_test
  image: registry.gitlab.aleph-alpha.de/enterprise-readiness/shared-images/gitlab-ci/common:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    TEAM_CONFIG_TOKEN: $TEAM_CONFIG_TOKEN_UI
  services:
    - name: $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA
      alias: $CI_PROJECT_NAME
      variables:
        SKILL_REGISTRY_USER: $CI_REGISTRY_USER
        SKILL_REGISTRY_PASSWORD: $CI_REGISTRY_PASSWORD
  script:
    - sh -x ./tests/test-image.sh $CONTAINER_PORT $CI_PROJECT_NAME

image_publish:
  stage: image_publish
  image: registry.gitlab.aleph-alpha.de/enterprise-readiness/shared-images/gitlab-ci/common:latest
  rules:
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE != "schedule"
    - if: $CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_SECURITY_SCAN == "true"
      when: never
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: $ARTIFACTORY_URL
  script:
    # login GitLab
    - podman login --username $CI_REGISTRY_USER --password $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # pull Pharia Kernel image and tag as latest
    - podman pull $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA
    - podman tag "$KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA" "$KERNEL_IMAGE:latest"
    - podman push "$KERNEL_IMAGE:latest"
    # pull Pharia Skill image and tag as latest
    - podman pull $SKILL_IMAGE:$CI_COMMIT_SHORT_SHA
    - podman tag "$SKILL_IMAGE:$CI_COMMIT_SHORT_SHA" "$SKILL_IMAGE:latest"
    - podman push "$SKILL_IMAGE:latest"
    # logout GitLab
    - podman logout $CI_REGISTRY
    # login JFrog
    - JFROG_ACCESS_TOKEN=$(get_jfrog_access_token $GITLAB_OIDC_TOKEN)
    - JFROG_ACCESS_TOKEN_SUBJECT=$(extract_access_token_subject $JFROG_ACCESS_TOKEN)
    - podman login --username "$JFROG_ACCESS_TOKEN_SUBJECT" --password $JFROG_ACCESS_TOKEN $ARTIFACTORY_URL/$ARTIFACTORY_REPO
    # push Pharia Kernel image
    - IMAGE_ID=$(podman inspect $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA | jq -r '.[].Config.Labels["com.aleph-alpha.image-id"]')
    - podman tag $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA $ARTIFACTORY_HOST/$ARTIFACTORY_REPO/$CI_PROJECT_NAME:latest
    - podman tag $KERNEL_IMAGE:$CI_COMMIT_SHORT_SHA $ARTIFACTORY_HOST/$ARTIFACTORY_REPO/$CI_PROJECT_NAME:$IMAGE_ID
    - podman push $ARTIFACTORY_HOST/$ARTIFACTORY_REPO/$CI_PROJECT_NAME:latest
    - podman push $ARTIFACTORY_HOST/$ARTIFACTORY_REPO/$CI_PROJECT_NAME:$IMAGE_ID
    - TARGET_REPO_ACCESS_TOKEN=$HELM_UPDATE_IMAGE_TAG_TOKEN update_image_tag gitlab.aleph-alpha.de/engineering/pharia-kernel-deployment.git helm-charts/pharia-kernel/values.yaml .deployment.image.tag $IMAGE_ID
    # push Pharia Skill image
    - SKILL_IMAGE_ID=$(podman inspect $SKILL_IMAGE:$CI_COMMIT_SHORT_SHA | jq -r '.[].Config.Labels["com.aleph-alpha.image-id"]')
    - podman tag $SKILL_IMAGE:$CI_COMMIT_SHORT_SHA $ARTIFACTORY_HOST/$ARTIFACTORY_REPO/$SKILL_ARTIFACT_NAME:latest
    - podman tag $SKILL_IMAGE:$CI_COMMIT_SHORT_SHA $ARTIFACTORY_HOST/$ARTIFACTORY_REPO/$SKILL_ARTIFACT_NAME:$SKILL_IMAGE_ID
    - podman push $ARTIFACTORY_HOST/$ARTIFACTORY_REPO/$SKILL_ARTIFACT_NAME:latest
    - podman push $ARTIFACTORY_HOST/$ARTIFACTORY_REPO/$SKILL_ARTIFACT_NAME:$SKILL_IMAGE_ID
